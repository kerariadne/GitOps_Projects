name: Deploy to EKS with Argo CD

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-west-2 --name gitops-cluster

      - name: Create Argo CD namespace
        run: kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Argo CD
        run: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Patch Argo CD server to LoadBalancer
        run: |
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

      - name: Wait for Argo CD server external IP
        run: |
          echo "Waiting for Argo CD LoadBalancer external IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc argocd-server -n argocd -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [ -n "$IP" ]; then echo "Argo CD URL: https://$IP"; break; fi
            sleep 10
          done

      - name: Deploy app to EKS
        run: |
          kubectl apply -f EKS_Cluster/app-deployment.yaml
          kubectl apply -f EKS_Cluster/app-service.yaml

      - name: Patch app service to LoadBalancer
        run: |
          kubectl patch svc my-nginx -p '{"spec": {"type": "LoadBalancer"}}'

      - name: Wait for app external IP
        run: |
          echo "Waiting for app LoadBalancer external IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc my-nginx -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [ -n "$IP" ]; then echo "App URL: http://$IP"; break; fi
            sleep 10
          done
      
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Get Argo CD external address
        id: get_argocd_ip
        run: |
          for i in {1..30}; do
            HOST=$(kubectl get svc argocd-server -n argocd -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            if [ -n "$HOST" ]; then
              echo "host=$HOST" >> $GITHUB_OUTPUT
              break
            fi
            sleep 10
          done

      - name: Change Argo CD admin password
        run: |
          PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d)
          argocd login ${{ steps.get_argocd_ip.outputs.host }} --username admin --password "$PASSWORD" --insecure
          argocd account update-password \
            --current-password "$PASSWORD" \
            --new-password "${{ secrets.ARGOCD_NEW_ADMIN_PASSWORD }}" \
            --insecure

      - name: password
        run: |
          kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d && echo

